global_tags]
[agent]
  interval = "1m"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "10s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = "0s"
  logfile = "/var/log/telegraf/telegraf.log"
  logfile_rotation_interval = "24h"
  logfile_rotation_max_archives = 30
  hostname = ""
  omit_hostname = false
  [[outputs.influxdb_v2]]
    urls = ["http://127.0.0.1:8086"]
    token = "change_me"
    organization = "default"
    bucket = "inverter"
    bucket_tag = "influxdb_bucket"
    exclude_bucket_tag = true
  # fronius inverter rename fields
  [[processors.strings]]
  ## Replace all non-overlapping instances of old with new
  ## Trim the given prefix from the field
  [[processors.strings.trim_prefix]]
    field_key = "*"
    prefix = "Body_Data_Site_"
  [[processors.strings.trim_prefix]]
    field_key = "*"
    prefix = "Body_Data_DeviceStatus_"
  [[processors.strings.trim_prefix]]
    field_key = "*"
    prefix = "Body_Data_0_Controller_"
  [[processors.strings.trim_prefix]]
    field_key = "*"
    prefix = "Body_Data_0_"
  [[processors.strings.trim_prefix]]
    field_key = "*"
    prefix = "Body_Data_1_"
  [[processors.strings.trim_prefix]]
    field_key = "*"
    prefix = "Body_Data_"
  [[processors.strings.trim_suffix]]
     field_key = "*"
     suffix = "_Value"
# pv forecast data
#   [[inputs.http]]
#     urls = [
#       "https://api.forecast.solar/estimate/watts/:lat/:lon/:dec/:az/:kwp?time=utc"
#     ]
#     headers = {"accept" = "text/csv", "X-Delimiter" = "|", "X-Separator" = ";"}
#     data_format = "csv"
#     name_override = "pv_forecast_watts"
#     interval = "6h"
#     csv_header_row_count = 0
#     csv_column_names = ["time","value"]
#     csv_delimiter = ";"
#     csv_timestamp_column = "time"
#     csv_timezone = "Etc/UTC"
#     csv_timestamp_format = "2006-01-02T15:04:05-07:00"
#     [inputs.http.tags]
#       influxdb_bucket = "pvforecast"
#   [[inputs.http]]
#     urls = [
#       "https://api.forecast.solar/estimate/watthours/:lat/:lon/:dec/:az/:kwp?time=utc"
#     ]
#     headers = {"accept" = "text/csv", "X-Delimiter" = "|", "X-Separator" = ";"}
#     data_format = "csv"
#     name_override = "pv_forecast_watt_hours"
#     interval = "7h"
#     csv_header_row_count = 0
#     csv_column_names = ["time","value"]
#     csv_delimiter = ";"
#     csv_timestamp_column = "time"
#     csv_timezone = "Etc/UTC"
#     csv_timestamp_format = "2006-01-02T15:04:05-07:00"
#     [inputs.http.tags]
#       influxdb_bucket = "pvforecast"
  [[inputs.http]]
    urls = [
      "https://api.forecast.solar/estimate/watthours/day/:lat/:lon/:dec/:az/:kwp?time=utc"
    ]
    headers = {"accept" = "text/csv", "X-Delimiter" = "|", "X-Separator" = ";"}
    data_format = "csv"
    name_override = "pv_forecast_watt_hours_day"
    interval = "8h"
    csv_header_row_count = 0
    csv_column_names = ["time","value"]
    csv_column_types = []
    csv_delimiter = ";"
    csv_timestamp_column = "time"
    csv_timezone = "Etc/UTC"
    csv_timestamp_format = "2006-01-02"
    [inputs.http.tags]
      influxdb_bucket = "pvforecast"

# fronius inverter data
  [[inputs.http]]
  # measurement name
  name_override = "smartmeter"
  # override default http query interval
  interval = "1m"

  ## One or more URLs from which to read formatted metrics
  urls = [
    "http://inverter/solar_api/v1/GetMeterRealtimeData.cgi?Scope=System"
  ]

  ## Data format to consume.
  # json parsing
  data_format = "json"
  json_time_key = "Body_Data_0_TimeStamp"
  json_time_format = "unix"
  
  # data filtering
  # EnergyReal_WAC_Plus_Absolute ... Import
  # EnergyReal_WAC_Minus_Absolute ... Export
  # Power* individual phases; *_Sum only sum of all phases.
  fieldpass = [
    "Body_Data_0_Energy*",
    "Body_Data_0_Current_AC_*",
    "Body_Data_0_Power*",
    "Body_Data_0_Voltage*",
    # "Body_Data_0_*_Sum"
    ]
  [inputs.http.tags]
      influxdb_bucket = "inverter"

[[inputs.http]]
  # measurement name
  name_override = "powerflow"
  # override default http query interval
  interval = "1m"

  ## One or more URLs from which to read formatted metrics
  urls = [
    "http://inverter/solar_api/v1/GetPowerFlowRealtimeData.fcgi"
  ]

  ## Data format to consume.
  # json parsing
  data_format = "json"
  json_time_key = "Head_Timestamp"
  json_time_format = "2006-01-02T15:04:05Z07:00"
  
  # data filtering
  fieldpass = [
    "Body_Data_Site_P_*",
    "Body_Data_Site_rel_*",
    "Body_Data_Site_E_Total"
  ]
  [inputs.http.tags]
      influxdb_bucket = "inverter"


[[inputs.http]]
  # measurement name
  name_override = "inverter"
  # override default http query interval
  interval = "1m"

  ## One or more URLs from which to read formatted metrics
  urls = [
    "http://inverter/solar_api/v1/GetInverterRealtimeData.cgi?Scope=Device&DeviceId=1&DataCollection=CommonInverterData",
    "http://inverter/solar_api/v1/GetInverterRealtimeData.cgi?Scope=Device&DeviceId=1&DataCollection=3PInverterData"
  ]

  ## Data format to consume.
  # json parsing
  data_format = "json"
  json_time_key = "Head_Timestamp"
  json_time_format = "2006-01-02T15:04:05Z07:00"
  
 # data filtering
  fieldpass = [
    "Body_Data_DeviceStatus_ErrorCode",
    "Body_Data_DeviceStatus_StatusCode",
    "*_Value"
  ]
  [inputs.http.tags]
      influxdb_bucket = "inverter"

[[inputs.http]]
  # measurement name
  name_override = "storage"
  # override default http query interval
  interval = "1m"

  ## One or more URLs from which to read formatted metrics
  urls = [
    "http://inverter/solar_api/v1/GetStorageRealtimeData.cgi"
  ]

  ## Data format to consume.
  # json parsing
  data_format = "json"
  json_time_key = "Head_Timestamp"
  json_time_format = "2006-01-02T15:04:05Z07:00"
  
 # data filtering
  fieldpass = [
    "Body_Data_0_Controller_StateOfCharge_Relative",
    "*Cell",
    "*DC",
    "*Capacity*"
  ]
  [inputs.http.tags]
      influxdb_bucket = "inverter"